# Multi-stage build for Coaxial Recorder with full GPU + MFA support
# Based on NVIDIA CUDA + Conda for maximum compatibility

# Stage 1: Base with CUDA
FROM nvidia/cuda:12.1.0-cudnn8-runtime-ubuntu22.04 as base

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CONDA_DIR=/opt/conda

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    git \
    build-essential \
    espeak-ng \
    ffmpeg \
    libsndfile1 \
    sox \
    portaudio19-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Miniconda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p $CONDA_DIR && \
    rm ~/miniconda.sh && \
    $CONDA_DIR/bin/conda clean -all -y

# Add conda to path
ENV PATH=$CONDA_DIR/bin:$PATH

# Configure conda to avoid ToS issues - use only conda-forge
RUN conda config --set always_yes yes && \
    conda config --remove channels defaults || true && \
    conda config --add channels conda-forge && \
    conda config --set channel_priority strict

# Stage 2: Python environment
FROM base as builder

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements_training.txt requirements_export.txt ./

# Ensure conda-forge is the only channel in builder stage
RUN conda config --set always_yes yes && \
    conda config --remove channels defaults || true && \
    conda config --add channels conda-forge && \
    conda config --set channel_priority strict

# Create conda environment with Python 3.10 from conda-forge only
RUN conda create -n coaxial python=3.10 -c conda-forge -y && \
    echo "source activate coaxial" > ~/.bashrc

# Activate environment and install packages
SHELL ["conda", "run", "-n", "coaxial", "/bin/bash", "-c"]

# Upgrade pip
RUN pip install --upgrade pip

# Install PyTorch with CUDA 12.1 (compatible with most GPUs)
RUN pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu121

# Install Montreal Forced Aligner via conda (this is the key!)
RUN conda install -c conda-forge montreal-forced-aligner -y

# Install core requirements
RUN pip install -r requirements.txt

# Install training requirements (excluding MFA since we installed via conda)
RUN grep -v "montreal-forced-alignment" requirements_training.txt | \
    xargs -r pip install

# Install export requirements
RUN pip install -r requirements_export.txt

# Download MFA models (optional but useful)
RUN mfa model download acoustic english_us_arpa || true
RUN mfa model download dictionary english_us_arpa || true

# Stage 3: Final runtime image
FROM base

WORKDIR /app

# Copy conda environment from builder
COPY --from=builder $CONDA_DIR $CONDA_DIR

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p voices output logs checkpoints

# Expose port for web interface
EXPOSE 8000

# Set up conda activation
SHELL ["conda", "run", "-n", "coaxial", "/bin/bash", "-c"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["conda", "run", "--no-capture-output", "-n", "coaxial", "python", "app.py"]

